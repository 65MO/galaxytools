<tool id="antarna" name="antaRNA" version="1.1">
  <description>Ant Colony Optimized RNA Sequence Design</description>
  <requirements>
        <requirement type="package" version="2.0.1.2">antarna</requirement>
  </requirements>
  <version_command>antaRNA.py --version</version_command>
  <command detect_errors="aggressive"><![CDATA[
    antarna.py
        #if $Cstr and $Cstr is not None:
            -Cstr '$Cstr'
        #end if

        #if $tGC and $tGC is not None:
            -tGC $tGC
        #end if

        #if $n and $n is not None:
            -n $n
        #end if
        $GU

        #if $s and $s is not None:
            -s $s
        #end if

        #if $ip and $ip is not None:
            -ip $ip
        #end if

        #if $r and $r is not None:
            -r $r
        #end if

        #if $CC and $CC is not None:
            -CC $CC
        #end if

        #if $aTC and $aTC is not None:
            -aTC $aTC
        #end if

        $p
        $pkPar

        #if $strategy and $strategy is not None:
            --strategy $strategy
        #end if

        #if $tGCmax and $tGCmax is not None:
            -tGCmax $tGCmax
        #end if

        #if $tGCvar and $tGCvar is not None:
            -tGCvar $tGCvar
        #end if

        #if $t and $t is not None:
            -t $t
        #end if

        #if $P and $P is not None:
            -P $P
        #end if

        #if $of and $of is not None:
            -of $of
        #end if

        #if $Cseq and $Cseq is not None:
            -Cseq $Cseq
        #end if

        #if $l and $l is not None:
        -l $l
        #end if

        #if $name and $name is not None:
            --name $name
        #end if

        #if $a and $a is not None:
            -a $a
        #end if

        #if $b and $b is not None:
            -b $b
        #end if

        #if $er and $er is not None:
            -er $er
        #end if

        #if $Cstrw and $Cstrw is not None:
            -Cstrw $Cstrw
        #end if

        #if $Cgcw and $Cgcw is not None:
            -Cgcw $Cgcw
        #end if

        #if $Cseqw and $Cseqw is not None:
            -Cseqw $Cseqw
        #end if
        $ov
        $v
> $default]]></command>
  <inputs>
    <param argument="-Cstr" type="text" label="Structure constraint using RNA dotbracket notation with fuzzy block constraint"/>
    <param argument="-tGC" type="float" value="0" min="0.0" max="1.0" label="Objective target GC content in"/>
    <param argument="-n" type="integer" value="0" label="Number of sequences which shall be produced"/>
    <param argument="-GU" type="boolean" truevalue="-GU" falsevalue="" checked="false" label="Allowing GU base pairs"/>
    <param value="none" label="Provides a seed value for the used pseudo random number generator" argument="-s" type="text"/>
    <param value="s" label="Select the improving method.  h=hierarchical, s=score_based" argument="-ip" type="text"/>
    <param argument="-r" type="integer" value="5" label="Amount of maximal terrain resets, until the best solution is retuned as solution"/>
    <param argument="-CC" type="integer" value="130" label="Delimits the convergence count criterion for a reset"/>
    <param argument="-aTC" type="integer" value="50" label="Delimits the amount of internal ants for termination convergence criterion for a reset"/>
    <param checked="false" label="Switch to pseudoknot based prediction using pKiss. Check the pseudoknot parameter usage!!! (-p)" name="p" type="boolean" truevalue="-p" falsevalue=""/>
    <param checked="false" label="Enable optimized parameters for the usage of pseudo knots (Further parameter input ignored). (-pkPar)" name="pkPar" type="boolean" truevalue="-pkPar" falsevalue=""/>
    <param value="A" label="Defining the pKiss folding strategy. (--strategy)" name="strategy" type="text"/>
    <param label="Provides a maximum tGC value [0,1] for the case of uniform distribution sampling. The regular tGC value serves as minimum value. (-tGCmax)" name="tGCmax" type="float" value="-1.0"/>
    <param label="Provides a tGC variance (sigma square) for the case of normal distribution sampling. The regular tGC value serves as expectation value (mu). (-tGCvar)" name="tGCvar" type="float" value="-1.0"/>
    <param label="Provides a temperature for the folding algorithms. (-t)" name="t" type="float" value="37.0"/>
    <param value="" label="Changes the energy parameterfile of RNAfold. If using this explicitly, please provide a suitable energy file delivered by RNAfold.  (-P)" name="P" type="text"/>
    <param value="STDOUT" label="Provide a path and an output file, e.g. &quot;/path/to/the/target_file&quot;.  (-of)" name="of" type="text"/>
    <param value="" label="Sequence constraint using RNA nucleotide alphabet {A,C,G,U} and wild-card &quot;N&quot;.  (-Cseq)" name="Cseq" type="text"/>
    <param label="Sets the level of allowed influence of sequence constraint on the structure constraint [0:no influence; 3:extensive influence]. (-l)" argument="-l" type="integer" value="1"/>
    <param value="antaRNA_" label="Defines a name which is used in the sequence output." argument="--name" type="text"/>
    <param argument="--alpha" type="float" value="1.0" min="0.0" max="1.0" label="Sets alpha, probability weight for terrain path influence." />
    <param argument="--beta" type="float" value="1.0" min="0.0" max="1.0" label="Sets beta, probability weight for terrain pheromone influence."/>
    <param argument="-er" type="float" value="0.2" label="Pheromone evaporation rate"/>
    <param argument="-Cstrw" type="float" value="0.5" min="0.0" max="1.0" label="Structure constraint quality weighting factor" />
    <param argument="-Cgcw" type="float" value="5.0" label="GC content constraint quality weighting factor" />
    <param argument="-Cseqw" type="float" value="1.0" min="0.0" max="1.0" label="Sequence constraint quality weighting factor" />
    <param argument="-v" type="boolean" truevalue="-v" falsevalue="" checked="false" label="Displayes intermediate output" />
    <param argument="-ov" type="boolean" truevalue="-ov" falsevalue="" checked="false" label="Prints additional output to the headers of the produced sequences"/>
  </inputs>
  <outputs>
    <data format="fasta" hidden="false" name="default">
        <change_format>
            <when input="v" value="-v" format="txt" />
            <when input="ov" value="-ov" format="txt" />
        </change_format>
    </data>
  </outputs>
  <tests>
    <test>
      <param name="Cstr" value="((..(..((...)))..))" />
      <param name="tGC" value="0.5" />
      <param name="n" value="1" />
      <output name="default">
        <assert_contents>
          <has_text_matching expression="[ACGU]{19}"/>
        </assert_contents>
      </output>
    </test>
  </tests>
  <help><![CDATA[

===========================
antaRNA - ant assembled RNA
===========================

- antaRNA uses the VIENNNA RNA Package
    - specifically it uses RNAfold and RNAdistance to calculate energies of and distances between secondary structures (version 2.1.x)
    - for the parametrization of antaRNA the version 2.1.3 of the ViennaRNA package was used


- For questions and remarks please feel free to contact us at http://www.bioinf.uni-freiburg.de/

Example parameters:
    - --Cstr "...(((...)))..." --tGC 0.5 -n 2
    - --Cstr ".........AAA(((...)))AAA........." --tGC 0.5 -n 10 --output_file /path/to/antaRNA_TESTRUN -ov
    - --Cstr "BBBBB....AAA(((...)))AAA....BBBBB" --Cseq "NNNNANNNNNCNNNNNNNNNNNGNNNNNNUNNN" --tGC 0.5 -n 10


		]]></help>
  <citations>
  </citations>
</tool>
