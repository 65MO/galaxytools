<tool id="infernal_cmsearch" name="Search covariance model(s)" version="1.1.0">
    <description>against a sequence database (cmsearch)</description>
    <requirements>
        <requirement type="package" version="1.1rc4">infernal</requirement>
    </requirements>
    <command>
        cmsearch --tblout
            --cpu 12
            -o /dev/null
            --tformat $seqdb.ext #target format: fasta, embl, genbank, ddbj, stockholm, pfam, a2m, afa, clustal, and phylip 
            $bottomonly
            $toponly
            $cyk
            $notrunc
            $max
            $nohmm
            $mid
            $bitscore_thresholds
            --tblout $outfile
            $g
            #if $A:
                $A $multiple_alignment_output
            #end if


            #if $inclusion_thresholds_opts.inclusion_thresholds_selector == "--incE":
                --incE $inclusion_thresholds_opts.incE
            #else:
                --incT $inclusion_thresholds_opts.incT
            #end if

            #if $reporting_thresholds_opts.reporting_thresholds_selector == "-E":
                -E $reporting_thresholds_opts.E
            #else:
                -T $reporting_thresholds_opts.T
            #end if

            #if $cm_opts.cm_opts_selector == "db":
                $cm_opts.database.fields.path
            #else:
                $cm_opts.cmfile
            #end if

            $seqdb


            2>&#38;1
    </command>
        <inputs>

            <param name="seqdb" type="data" format="fasta,embl,genbank" label="Sequence database"/>

            <conditional name="cm_opts">
                <param name="cm_opts_selector" type="select" label="Subject covariance models">
                  <option value="db" selected="True">Locally installed covariance models</option>
                  <option value="histdb">Covariance model from your history</option>
                </param>
                <when value="db">
                    <param name="database" type="select" label="Covariance models">
                        <options from_file="infernal.loc">
                          <column name="value" index="0"/>
                          <column name="name" index="1"/>
                          <column name="path" index="2"/>
                        </options>
                    </param>
                </when>
                <when value="histdb">
                    <param name="cmfile" type="data" format="fasta" label="Covariance models file from the history."/>
                </when>
            </conditional>

            <param name="g" truevalue="-g" falsevalue="" checked="False" type="boolean" 
                label="Turn on the glocal alignment algorithm" help="... global with respect to the query model and local with respect to the target database."/>

            <param name="bottomonly" truevalue="--bottomonly" falsevalue="" checked="False" type="boolean" 
                label="Only search the bottom (Crick) strand of target sequences" help="in the sequence database"/>
            <param name="toponly" truevalue="--toponly" falsevalue="" checked="False" type="boolean" 
                label="Only search the top (Watson) strand of target sequences" help="in the sequence database"/>

            <param name="cyk" truevalue="--cyk" falsevalue="" checked="False" type="boolean" 
                label="Use the CYK algorithm, not Inside, to determine the final score of all hits" help=""/>
            <param name="--acyk" truevalue="--cyk" falsevalue="" checked="False" type="boolean" 
                label="Use the CYK algorithm to align hits" help="By default, the Durbin/Holmes optimal accuracy algorithm is used, which finds the alignment that maximizes the expected accuracy of all aligned residues."/>

            <param name="notrunc" truevalue="--notrunc" falsevalue="" checked="False" type="boolean" 
                label="Turn off truncated hit detection" help=""/>

            <!-- accelleration pipeline -->

            <param name="max" truevalue="--max" falsevalue="" checked="False" type="boolean" 
                label="Turn off all filters, and run non-banded Inside on every full-length target sequence" help="This
                increases sensitivity somewhat, at an extremely large cost in speed."/>

            <param name="nohmm" truevalue="--nohmm" falsevalue="" checked="False" type="boolean" 
                label="Turn off all HMM filter stages " help=""/>

            <param name="mid" truevalue="--mid" falsevalue="" checked="False" type="boolean" 
                label="Turn off the HMM SSV and Viterbi filter stages" help=""/>


            <!-- Options for model-specific score thresholding -->

            <param name="bitscore_thresholds" type="select" label="Bit score thresholds" help="Curated CM databases may define specific bit score thresholds for each CM, superseding any thresholding based on statistical significance alone.">
                <option value="" selected="true">None</option>
                <option value="--cut_ga">GA (gathering) bit scores</option>
                <option value="--cut_nc">NC (noise cutoff) bit score</option>
                <option value="--cut_tc">TC (trusted cutoff) bit score</option>
            </param>

            <!-- Options for inclusion thresholds -->


            <conditional name="inclusion_thresholds_opts">
                <param name="inclusion_thresholds_selector" type="select" label="Inclusion thresholds"
                help="Inclusion thresholds are stricter than reporting thresholds. Inclusion thresholds control which hits are considered to be reliable enough to be included in an output alignment or in a possible subsequent search round, or marked as significant (”!”) as opposed to questionable (”?”) in hit output.">
                    <option value="--incE" selected="true">Use E-value</option>
                    <option value="--incT">Use bit score</option>
                </param>
                <when value="--incE">
                    <param name="incE" type="float" value="0.01" size="5" label="Use E-value" help="of &lt;= X as the hit inclusion threshold.">
                        <sanitizer>
                            <valid initial="string.printable">
                                <remove value="&apos;"/>
                            </valid>
                        </sanitizer>
                    </param>
                </when>
                <when value="--incT">
                    <param name="incT" type="integer" size="5" value="0" label="Use bit score" help="of >= X as the hit inclusion threshold.">
                        <sanitizer>
                            <valid initial="string.printable">
                                <remove value="&apos;"/>
                            </valid>
                        </sanitizer>
                    </param>
                </when>
            </conditional>


            <!-- Options controlling reporting thresholds -->

            <conditional name="reporting_thresholds_opts">
                <param name="reporting_thresholds_selector" type="select" label="reporting thresholds"
                help="Reporting thresholds control which hits are reported in output files">
                    <option value="-E" selected="true">Use E-value</option>
                    <option value="-T">Use bit score</option>
                </param>
                <when value="-E">
                    <param name="E" type="float" value="10.0" size="5" label="Use E-value" help="of &lt;= X as the hit reporting threshold. The default is 10.0, meaning that on average, about 10 false positives will be reported per query, so you can see the top of the noise and decide for yourself if it’s really noise.">
                        <sanitizer>
                            <valid initial="string.printable">
                                <remove value="&apos;"/>
                            </valid>
                        </sanitizer>
                    </param>
                </when>
                <when value="-T">
                    <param name="T" type="integer" size="5" value="0" label="Use bit score" help="of >= X as the hit reporting threshold.">
                        <sanitizer>
                            <valid initial="string.printable">
                                <remove value="&apos;"/>
                            </valid>
                        </sanitizer>
                    </param>
                </when>
            </conditional>

            <param name="A" truevalue="-A" falsevalue="" checked="False" type="boolean" 
                label="Save a multiple alignment of all significant hits ..." help="... those satisfying inclusion thresholds"/>


        </inputs>
    <outputs>

        <data format="tabular" name="outfile" label="cmsearch on ${on_string}"/>
        <data format="tabular" name="multiple_alignment_output" label="cmsearch on ${on_string} (multi alignment)">
            <filter>A is True</filter>
        </data>

    </outputs>
    <requirements>
    </requirements>
    <help>

**What it does**

Options for model-specific score thresholding
---------------------------------------------


  - GA thresholds are generally considered to be the reliable curated thresholds defining family membership; for example, in Rfam, these thresholds define what gets included in Rfam Full alignments based on searches with Rfam Seed models.
  - NC thresholds are generally considered to be the score of the highest-scoring known false positive.
  - TC thresholds are generally considered to be the score of the lowest-scoring known true positive that is above all known false positives.


-g Turn on the glocal alignment algorithm, global with respect to the query model and local with
respect to the target database. By default, the local alignment algorithm is used which is
local with respect to both the target sequence and the model. In local mode, the alignment to
span two or more subsequences if necessary (e.g. if the structures of the query model and
target sequence are only partially shared), allowing certain large insertions and deletions
in the structure to be penalized differently than normal indels. Local mode performs better
on empirical benchmarks and is significantly more sensitive for remote homology detection.
Empirically, glocal searches return many fewer hits than local searches, so glocal may be
desired for some applications. With -g, all models must be calibrated, even those with zero
basepairs.




    </help>
</tool>
