<tool id="bg_eden_test" name="EDeN Test" version="0.1">
    <description></description>
    <requirements>
    </requirements>
    <command>
        EDeN --action TEST
        
        --input_data_file_name $infile
        --file_type $file_type ##SPARSE_VECTOR | GRAPH | SEQUENCE [GRAPH] 
        --binary_file_type 
        --kernel_type $kernel_type ##NSPDK | WDK | PBK | USPK | DDK | NSDDK | ANSDDK | SK [NSPDK] 
        --graph_type $graph_type ##DIRECTED | UNDIRECTED [UNDIRECTED] 
        $no_normalization
        $min_kernel
        ##--model_file_name [model] 
        ##--suffix     Suffix string for all output files. 
        --hash_bit_size $hash_bit_size
        --radius $kernel
        --distance $distance
        --vertex_degree_threshold $vertex_degree_threshold
        ##-M --sequence_degree [1]     SEQUENCE data type. 
        ##--sequence_token     Labels are strings separated by spaces. 
        ##--sequence_multi_line     The annotation is encoded on subsequent rows. 
        ##--sequence_pairwise_interaction     Abstraction vertices relating all pairs of disjointed sequences are inserted. 
        ##-V --verbose     Outputs the graphs and the feature encodings. 
        --minimal_output
        --tree_lambda $tree_lambda
        --radius_two $radius_two

    </command>
    <inputs>
        <param format="gspan" name="infile" type="data" label="Input Graph" help=""/>

        <param name="file_type" type="select" display="radio" label="Type of Input file">
            <option value="GRAPH">Graph</option>
            <option value="SPARSE_VECTOR">sparse vector</option>
            <option value="SEQUENCE">Sequence</option>
        </param>

        <param name="kernel_type" type="select" display="radio" label="Type of the Kernel">
            <option value="NSPDK">NSPDK</option>
            <option value="WDK">WDK</option>
            <option value="PBK">PBK</option>
            <option value="USPK">USPK</option>
            <option value="DDK">DDK</option>
            <option value="NSDDK">ANSDDK</option>
            <option value="SK">SK [NSPDK]</option>
        </param>

        <param name="graph_type" type="select" display="radio" label="Type of Graph">
            <option value="DIRECTED">directed</option>
            <option value="UNDIRECTED">undirected</option>
        </param>

        <param name="no_normalization" type="boolean" label="Skip normalization" truevalue="--no_normalization" falsevalue="" checked="false" />
        <param name="min_kernel" type="boolean" label="Use minimal kernel" truevalue="--min_kernel" falsevalue="" checked="false" />
        <param name="hash_bit_size" type="integer" value="15" label="Bit size of the used hashing function" help="">
            <validator type="in_range" min="1" />
        </param>
        <param name="radius" type="integer" value="2" label="Radius that defines a neighbourhood" help="">
            <validator type="in_range" min="1" />
        </param>
        <param name="distance" type="integer" value="5" label="Distance that defines a neighbourhood" help="">
            <validator type="in_range" min="1" />
        </param>
        <param name="vertex_degree_threshold" type="integer" value="7" label="Vertex degree threshold" help="">
            <validator type="in_range" min="1" />
        </param>
        <param name="radius_two" type="integer" value="2" label="Radius Two" help="">
            <validator type="in_range" min="1" />
        </param>
        <param name="tree_lambda" type="float" value="1.2" label="Tree lambda" help="">
            <validator type="in_range" min="0.0" />
        </param>
    </inputs>
    <outputs>
        <data format="gspan" name="outfile" label="gSpan from ${on_string}"/>
    </outputs>
    <tests>
        <test>
            <param name="infile" value="3_molceuls.sdf" />
            <output name="outfile" file="3_molecules.gspan" />
        </test>
    </tests>
    <help>

.. class:: infomark

**What it does** 

The linear model is induced using the accelerated stochastic gradient descent technique by LÃ©on Bottou and Yann LeCun.
When the target information is 0, a self-training algorithm is used to impute a positive or negative class to the unsupervised instances.
If the target information is imbalanced a minority class resampling technique is used to rebalance the training set.

    </help>
</tool>
