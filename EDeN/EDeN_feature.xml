<tool id="bg_eden_feature" name="EDeN Converter" version="0.1">
    <description></description>
    <macros>
        <import>eden_macros.xml</import>
    </macros>
    <expand macro="requirements">
        <requirement type="set_environment">EDEN_SCRIPT_PATH</requirement>
        <requirement type="package" version="2.3.2">openbabel</requirement>
    </expand>
    <command>

        ## pre-processing step if we have a molecule type we need to convert it to the gSpan format at first

        #import tempfile, os
        #set $temp_gspan = tempfile.NamedTemporaryFile( delete=False )
        #silent $temp_gspan.close()
        #set $temp_gspan = $temp_gspan.name

        #if $file_type_opts.file_type_opts_selector == 'sdf':
            obabel -i sdf -o sdf $infile ---errorlevel 1 | python \$EDEN_SCRIPT_PATH/mol2gspan.py --infile - --outfile $temp_gspan
            #set $file_type = 'GRAPH'
        #elif $file_type_opts.file_type_opts_selector == 'smi':
            obabel -i smi -o sdf $infile ---errorlevel 1 | python \$EDEN_SCRIPT_PATH/mol2gspan.py --infile - --outfile $temp_gspan
            #set $file_type = 'GRAPH'
        #elif $file_type_opts.file_type_opts_selector == 'fasta':
            fasta2shrep_gspan.pl
                --fasta $infile

                #if $file_type_opts.annotate_infile:
                    -annotate $file_type_opts.annotate_infile
                #end if

                -shift $shift
                $cue
                $stack
                #if $file_type_opts.energy_opts.energy_opts_selector == 'energy':
                    -e $file_type_opts.energy_opts.e
                #elif $file_type_opts.energy_opts.energy_opts_selector == 'rel_energy':
                    -c $file_type_opts.energy_opts.c
                #end if

                $q
                -Tp $Tp
                $seq_graph_win
                $seq_graph_t
                $seq_graph_alph
                $abstr
                $nostr
                $vp
                $ignore_header
                -M $M
                $u
                $r

                -stdout

                > $temp_gspan

                #if $file_type_opts.structure_sampling_opts.structure_sampling_opts_selector == 'on':
                    -i $file_type_opts.structure_sampling_opts.i
                    -sample_len $file_type_opts.structure_sampling_opts.sample_len
                #end if

        #else:
            #set $temp_gspan = $infile
            #set $file_type = $file_type_opts.file_type_opts_selector
        #end if
        ;

        tmp_dir=`mktemp -d -u`;

        EDeN --action FEATURE

        --output_directory_path \$tmp_dir

        --input_data_file_name $temp_gspan
        --model_file_name $outfile

        ## if we have an molecule datatype the file_type is set to GRAPH, after convertion to the gSpan Graph format
        --file_type $file_type

        --binary_file_type ## create a binary sparse vector as output


        @normalization_kernel_hash_radius_dist_vertex@


        --kernel_type $kernel_type_opts.kernel_type_opts_selector
        --graph_type $graph_type

        #if $file_type_opts.file_type_opts_selector == 'SEQUENCE':

            --sequence_degree $sequence_degree
            $sequence_token
            $sequence_multi_line
            $sequence_pairwise_interaction

        #end if

        @kernel_type_options@

        @input_smooth_conditional@


        ;
        cp \$tmp_dir/feature $outfile;
        rm \$tmp_dir -rf;
        rm $temp_gspan


    </command>
    <stdio>
        <regex match="Error" 
           source="both" 
           level="fatal" 
           description="An error occured with your Job." />
    </stdio>
    <inputs>
        <param format="smi,gspan,inchi,sdf,mol,mol2,txt" name="infile" type="data" label="Input file" 
            help="File can contain molecule data types (SMILES, InChI, SDF), sequences (FASTA) or Graph datatypes (gSpan, sparse vector, sequence)."/>

        <conditional name="file_type_opts">
            <param name="file_type_opts_selector" type="select" label="Type of Input file">
                <option value="GRAPH">Graph</option>
                <option value="SPARSE_VECTOR">sparse vector</option>
                <option value="SEQUENCE">Sequence</option>
                <option value="sdf">SDF</option>
                <option value="smi">SMILES</option>
                <option value="fasta">Sequences in FASTA format</option>
            </param>
            <when value="GRAPH" />
            <when value="SPARSE_VECTOR" />
            <when value="SEQUENCE">
                <param name="sequence_degree" type="integer" value="1" label="Sequence degree" help="">
                    <validator type="in_range" min="1" />
                </param>
                <param name="sequence_token" type="boolean" label="Sequence token" truevalue="--sequence_token" falsevalue="" checked="false" />
                <param name="sequence_multi_line" type="boolean" label="Sequence is in multi-line notation" truevalue="--sequence_multi_line" falsevalue="" checked="false" />
                <param name="sequence_pairwise_interaction" type="boolean" label="Sequence pairwise iterations" truevalue="--sequence_pairwise_interaction" falsevalue="" checked="false" />
            </when>
            <when value="sdf" />
            <when value="smi" />
            <when value="fasta">

                <!-- todo repeat tag, normally only 3 windows are specified-->
                <param name="wins" type="text" value="" label="A list of window sizes to use"
                    help="if none are given, then the entire sequence is taken with no windows. Each window > 1 required! Example: 50,100,200. (-wins)" />
                <param name="t" type="text" value="3=0" label="The shape type (RNAshapes types from 1-5)"
                    help="With the list format, the shape level can be changed for different window length '4=100' means that shape level 4 is used from length 100nt (window length) The first given length has to be 0! Not continuous given levels are allowed! (-t)" />


                <param name="shift" type="integer" value="1" label="The shift of the window, relative to the window size given in percent" 
                    help="Example 20 % of a window 150 would result in a step size of 30 nt. It is a relative parameter, as you can give different window sizes. Default shift of 1 nt. (-shift)">
                    <validator type="in_range" min="0" max="100" />
                </param>
                <param name="cue" type="boolean" label="Crop unpaired ends" truevalue="-cue" falsevalue="" checked="false" 
                    help="If you give this flag, then the unpaired ends of each single structure are ignored. E.g. the structure ...(((...))).. becomes just (((...))). (-cue)" />

                <param name="stack" type="boolean" label="Adds stacking information to graphs" truevalue="-stack" falsevalue="" checked="false" 
                    help="This adds an additional vertex (type P) for each pair of stacked base-pairs and four edges (type p) from each of the involved bases to the new vertex. (-stack)" />

                <conditional name="energy_opts">
                    <param name="energy_opts_selector" type="select" label="Energy calculation mode">
                        <option value="rel_energy">Relative energy range, i.e. percentage (%) of MFE energy (RNAshapes)</option>
                        <option value="energy">Energy range in kcal/mol (RNAshapes)</option>
                        <option value="">None</option>
                    </param>
                    <when value="" />
                    <when value="energy">
                        <param name="e" type="float" value="5.0" label="Energy range in kcal/mol (RNAshapes)" help="-e">
                            <validator type="in_range" min="0.0" />
                        </param>
                    </when>
                    <when value="rel_energy">
                        <param name="c" type="float" value="10" label="Relative energy range, i.e. percentage (%) of MFE energy (RNAshapes)" help="(-c)">
                            <validator type="in_range" min="0.0" />
                        </param>
                    </when>
                </conditional>

                <param name="M" type="integer" value="0" label="Max number of shreps that should be taken per window" help="0 means selects all shreps. (-M)">
                    <validator type="in_range" min="0" />
                </param>

                <param name="u" type="boolean" label="Ignore unstable RNAshapes" truevalue="-u" falsevalue="" checked="false" 
                    help="This option filters out closed structures with positive free energy. (-u)" />

                <param name="r" type="boolean" label="Calculate structure probabilities for RNAshapes" help="(-r)" truevalue="-r" falsevalue="" checked="false" />


                <conditional name="structure_sampling_opts">
                    <param name="structure_sampling_opts_selector" type="select" label="Structure Sampling">
                        <option value="on">On</option>
                        <option value="off">Off</option>
                    </param>
                    <when value="on">
                        <param name="i" type="integer" value="1" label="Number of sampling iterations" help="(-i)">
                            <validator type="in_range" min="1" />
                        </param>
                        <param name="smaple_len" type="integer" value="0" label="Sampling is only used for seqs/windows >= given length" help="Default 0 (sample all length). (-sample-len)">
                            <validator type="in_range" min="0" />
                        </param>
                    </when>
                    <when value="off" />
                </conditional>

                <param name="q" type="boolean" label="Turn on shape probabilities for RNAshapes, no sampling mode allowed" help="(-q)" truevalue="-q" falsevalue="" checked="false" />
                <param name="Tp" type="float" value="0.001" label="Filter cutoff for shape probabilities, applied before -M filter!" help="(-Tp)">
                    <validator type="in_range" min="0.0" />
                </param>

                <param name="seq_graph_win" type="boolean" label="Add for each window a graph which contains no structure" 
                    help="(-seq-graph-win)" 
                    truevalue="-seq-graph-win" falsevalue="" checked="false" />
                <param name="seq_graph_t" type="boolean" label="add for each 't #' a graph which contains no structure" 
                    help="(-seq-graph-t)" 
                    truevalue="-seq-graph-t" falsevalue="" checked="false" />
                <param name="seq_graph_alph" type="boolean" label="Change the alphabet of unstructured graphs" 
                    help="(-seq-graph-alph)" 
                    truevalue="-seq-graph-alph" falsevalue="" checked="false" />

                <param format="tabular" name="annotate_infile" type="data" optional="True" label="A file with annotations to be added as abstract graphs" 
                    help="The format is has the following TAB-delimited columns: SEQID, START, END, NAMESPACE#LABEL. Labels with the same name-space and SEQID form connected components, which is a sequence of label vertices ordered by the START position in the sequence."/>

                <param name="abstr" type="boolean" label="Add abstract structure graphs to the single shrep graph instances" 
                    help="(-abstr)" 
                    truevalue="-abstr" falsevalue="" checked="false" />
                <param name="nostr" type="boolean" label="Calculate no structures, only add sequence information" 
                    help="-seq-graph-win AND/OR -seq-graph-t are required (-nostr)" 
                    truevalue="-nostr" falsevalue="" checked="false" />

            <!--
            -match-shape    SHAPE
                    all seqs/windows will be constraint folded into that shape via 
                    RNAshapes (if structure is given in another way this struct will be kept), 
                    if this shape is not possible within given energy range, produce a 
                    specific t graph with only one vertex 'X'. By this the instance 
                    becomes very unsimilar to all other graphs (for knn)
            -->
                <param name="vp" type="boolean" label="Enable graph computation with viewpoints" 
                    help="svmsgdnspdk will center on those nucleotides that are given via capital letters and ignore those given as lowercase letters (-vp)" 
                    truevalue="-vp" falsevalue="" checked="false" />

                <param name="ignore_header" type="boolean" label="Don't write fasta id part after first space to gspan" help="(-ignore-header)" truevalue="-ignore-header" falsevalue="" checked="false" />


            </when>
        </conditional>

        <expand macro="kernel_type_options" />

        <expand macro="graph_types" />

        <expand macro="input_smooth_conditional" />

        <expand macro="normalization_kernel_hash_radius_dist_vertex" />


    </inputs>
    <configfiles>
<!-- The strange indentation is necessary, otherwise we get line breaks or white space in our file -->
<configfile name="row_index_file_name">#if $smooth_opts.smooth_opts_selector == 'smooth':
                #for $element in str( $smooth_opts.row_index ).split(','):
                    #set $element = $element.strip().split('-')
                    #if len($element) == 2:
                        #for $index in range( int($element[0]), int($element[1]) ):
                            ## the following writes the value at the beginning of each line
                            ## #echo $index# inserts a line break automatically, but do not write it
                            ## to the beginning of the line
                            #echo '%s\n' % $index
                        #end for
                    #else:
                        #echo '%s\n' % $element[0]
                    #end if
                #end for
            #end if
</configfile>
<configfile name="col_index_file_name">#if $smooth_opts.smooth_opts_selector == 'smooth':
                #for $element in str( $smooth_opts.col_index ).split(','):
                    #set $element = $element.strip().split('-')
                    #if len($element) == 2:
                        #for $index in range( int($element[0]), int($element[1]) ):
                            ## the following writes the value at the beginning of each line
                            ## #echo $index# inserts a line break automatically, but do not write it
                            ## to the beginning of the line
                            #echo '%s\n' % $index
                        #end for
                    #else:
                        #echo '%s\n' % $element[0]
                    #end if
                #end for
            #end if
</configfile>
    </configfiles>
    <outputs>
        <data format="eden_sparse_vector" name="outfile" label="Sparse vector from ${on_string}"/>
    </outputs>
    <tests>
        <test>
            <param name="infile" value="3_molceuls.sdf" />
            <output name="outfile" file="3_molecules.gspan" />
        </test>
    </tests>
    <help>

.. class:: infomark

**What it does** 

The linear model is induced using the accelerated stochastic gradient descent technique by Léon Bottou and Yann LeCun.
When the target information is 0, a self-training algorithm is used to impute a positive or negative class to the unsupervised instances.
If the target information is imbalanced a minority class resampling technique is used to rebalance the training set.

@references@

    </help>
</tool>
